<!--  -->
<template>
  <view class="search-box">
    <icon type="search" size="20">
    </icon>
    <input @input="inputValue" type="text" placeholder="请输入你想要的商品" value="{{inputValue}}">
    <button @tap="search"  hidden="{{hiddenSearch}}">搜索</button>
  </view>
  <!-- 搜索历史 -->
  <view hidden="{{!hiddenList}}" class="history-box">
    <view class="title-box">
      <view class="title">历史搜索</view>
      <view @tap="clearHistory" class="clear">x</view>
    </view>
    <view class="list">
      <block wx:for="{{searchHistory}}">
        <view @tap="insertSearch({{item}})" class="item">{{item}}</view>
      </block>
    </view>
  </view>
  <!-- 结果列表 -->
  <view hidden="{{hiddenList}}" class="list-box">
    <view class="options">
      <view @tap="selectOption({{0}})"  class="option {{selectOptionIndex==0?'active':''}}">综合</view>
      <view @tap="selectOption({{1}})"  class="option {{selectOptionIndex==1?'active':''}}">销量</view>
      <view @tap="selectOption({{2}})"  class="option iconfont {{selectOptionIndex==2?'active':''}} {{priceSort?'icon-jiantoushang':'icon-jiantouxia'}}">价格</view>
    </view>
    <!-- 商品列表 -->
    <view class="product-list">
      <block wx:for="{{goodList}}">
          <view @tap="toDetail({{item.goods_id}})" class="item">
            <view class="left">
              <image src="{{item.goods_small_logo}}"></image>
            </view>
            <view class="right">
              <view class="name">{{item.goods_name}}</view>
              <view class="price">¥<text>{{item.goods_price}}</text>.00</view>
            </view>
          </view>
      </block>
    </view>
  </view>
</template>

<script>
// 引入
import wepy from 'wepy'

// 引入自己封装的函数
var method = require('../utils/method.js');

// 定义了一个类 Search 继承与 wepy.page
// 继承的目的是为了能够使用 wepy.page 的所有功能
// 暴露
export default class Search extends wepy.page {
  config = {
    navigationBarTitleText: '搜索'
  }

  data = {
    // 控制搜索按钮显示隐藏
    hiddenSearch: true,
    // 保存输入的数据
    inputValue: '',
    // 搜索历史数据
    searchHistory: undefined,
    // 是否隐藏列表盒子
    hiddenList:true,
    // 选中的选项
    selectOptionIndex:0,
    // 保存获取的数据
    goodList:[],
    // 为了能够还原为最开始的样子 再次定义一份数据保存
    goodListDefault:[],
    // 价格排序的方式(true升序 false倒序)
    priceSort:true
  }

  components = {}

  methods = {
    // 用户输入时触发
    inputValue(event) {
      // console.log(event);
      // 获取数据 去空格  判断长度
      if (event.detail.value.trim().length == 0) {
        // 没有值
        this.hiddenSearch = true
      } else {
        // 有值
        this.hiddenSearch = false
      }
      // 保存输入的数据
      this.inputValue = event.detail.value
    },
    // 点击搜索按钮时触发
    search() {
      console.log(this.inputValue)
      // 获取输入的内容
      // 判断是否存在同名的值 获取数组中 某个值的索引
      var result = this.searchHistory.indexOf(this.inputValue);
      if(result!=-1){
        // 有相同的值 删除数组中原有的值
        this.searchHistory.splice(result,1);
      }
      // 长度是否越界
      if(this.searchHistory.length>=3){
        this.searchHistory.splice(0,1);
      }

      // 增加到历史数组中
      this.searchHistory.push(this.inputValue);
      // 保存到缓存中
      wx.setStorage({
        key: 'search',
        data: this.searchHistory
      });

      // 显示 结果列表
      // this.hiddenList = false;
      wx.showLoading({
        title: '别急哦!',
        mask: true,
      });

      // 调用接口 获取数据
      method.request({
        // https://www.zhengzhicheng.cn/api/public/v1/goods/search
        url:'api/public/v1/goods/search',
        data:{
          query:this.inputValue
        },
        success:(res)=>{
          console.log(res);
          // 藏起来loading
          wx.hideLoading();
          // 显示搜索结果盒子
          this.hiddenList = false;
          // 保存商品数据
          this.goodList = res.data.message.goods;
          // 再次保存一份最开始的数据 方便后续的还原
          // 如果直接赋值 是地址的赋值 两个变量都指向了 同一个数组
          // goodList排序之后 goodListDefault 也会一起改变
          // 克隆一个一样的数组 如何克隆数组
          // slice(0) 克隆了一份数组 保存到 goodListDefault 不会影响 原始的那个数组
          this.goodListDefault = res.data.message.goods.slice(0);

          // 异步中不会主动检查脏数据 需要手动的 apply
          // 如果不写 这行也可以(官方文档中 一定要手动 apply)
          this.$apply();
        }
      })


    },
    // 清除历史记录
    clearHistory() {
      console.log('clear')
      // 删除
      this.searchHistory = []
      // 清除缓存中的
      wx.removeStorage({
        key: 'search'
      });
    },
    // 点击获取选项的内容
    insertSearch(res){
      console.log(res);
      this.inputValue = res;
      // 显示搜索
      this.hiddenSearch = false;
    },
    // 点击修改选中的索引
    selectOption(index){
      this.selectOptionIndex = index;
      // 根据索引判断点击的选项
      switch (index) {
        case 0:
          console.log('默认值');
          // 数据恢复默认的排序状态
          // 把绑定的数据 重新赋值为 default值
          // 地址的赋值
          this.goodList = this.goodListDefault.slice(0);
          break;
        case 1:
          console.log('销量排序');
          // sort 排序方法
          // 自己人为的传入排序的规则
          // a 前一个数组值
          // b 后一个数组值
          this.goodList.sort((a,b)=>{
            // console.log(a);
            // console.log(b);
            // 返回一个排序的依据 布尔即可
            // return a.goods_id - b.goods_id;
            return a.cat_id - b.cat_id;
          })
          break;
        case 2:
          console.log('价钱排序');
          // 布尔值取反
          this.priceSort = !this.priceSort;
          this.goodList.sort((a,b)=>{
            // console.log(a);
            // console.log(b);
            // 返回一个排序的依据 布尔即可
            if(this.priceSort){
              return a.goods_price - b.goods_price;
            }else{
              return b.goods_price - a.goods_price;
            }
          })
          break;
      }
    },
    // 点击跳转 详情页
    toDetail(goods_id){
      console.log(goods_id);
      // 跳转页面
      wx.navigateTo({
        url: `/pages/detail?goods_id=${goods_id}`
      });
    }
  }

  events = {}

  watch = {}

  computed = {}

  onLoad() {
    // 页面加载完毕 加载 本地缓存的搜索历史
    wx.getStorage({
      key: 'search',
      success: res => {
        // 如果有数据 直接获取数据 渲染到页面上
        console.log(res)
        // 保存到data中
        this.searchHistory = res.data;
        this.$apply();
      },
      fail: res => {
        // 如果没有数据 准备一个初始数据
        console.log(res)
        // 设置一个空数组
        // this.searchHistory = ['小米笔记本', '小米姐姐', '小姐姐']
        this.searchHistory = []
        // 手动让wepy检查数据
        this.$apply()
      }
    })
  }

  onShow() {}
}
</script>

<style lang='less'>
// 顶部的盒子
.search-box {
  height: 120rpx;
  background-color: #eeeeee;
  padding: 30rpx 16rpx;
  box-sizing: border-box;
  position: relative;
  display: flex;
  align-items: center;
  icon {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    left: 37rpx;
  }
  input {
    flex: 1;
    height: 60rpx;
    background-color: white;
    padding-left: 80rpx;
    margin-right: 20rpx;
    font-size: 28rpx;
    border-radius: 10rpx;
  }
  button {
    width: 160rpx;
    height: 60rpx;
    border: 1px solid #bfbfbf;
    box-sizing: border-box;
    font-size: 30rpx;
    // transparent 透明的颜色
    // background-color: transparent;
    background-color: #eeeeee;
    line-height: 60rpx;
  }
}
// 历史盒子
.history-box {
  padding: 29rpx 19rpx;
  .title-box {
    display: flex;
    justify-content: space-between;
    .title {
      font-size: 32rpx;
    }
    .clear {
      width: 30rpx;
      height: 30rpx;
      background-color: #cccccc;
      color: white;
      font-size: 24rpx;
      border-radius: 50%;
      text-align: center;
      line-height: 30rpx;
    }
  }
  .list {
    padding-top: 32rpx;
    overflow: hidden;
    .item {
      padding: 21rpx 26rpx;
      font-size: 28rpx;
      margin-right: 30rpx;
      margin-bottom: 18rpx;
      background-color: #dddddd;
      float: left;
    }
  }
}
// 结果盒子
.list-box{
  .options{
    display: flex;
    align-items: center;
    height: 100rpx;
    .option{
      flex:1;
      font-size:28rpx;
      text-align: center;
      &.active{
        color:#eb4450;
      }
    }
  }
  .product-list{
    .item{
      display: flex;
      border-bottom: 1px solid #ccc;
      .left{
        padding: 30rpx;
        image{
          width: 200rpx;
          height: 200rpx;
        }
      }
      .right{
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        padding: 30rpx;
        .name{
          font-size:32rpx;
          max-height: 80rpx;
          overflow: hidden;
        }
        .price{
          color:#eb4450;
          font-size:28rpx;
          text{
            font-size:34rpx;
          }
        }
      }
    }
  }
}
</style>
